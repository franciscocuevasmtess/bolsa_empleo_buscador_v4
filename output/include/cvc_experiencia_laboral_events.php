<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_cvc_experiencia_laboral  extends eventsBase
{
	function __construct()
	{
	// fill list of events

		$this->events["BeforeShowEdit"]=true;

		$this->events["BeforeShowAdd"]=true;


		$this->events["BeforeAdd"]=true;

		$this->events["BeforeEdit"]=true;


		$this->events["BeforeMoveNextList"]=true;

		$this->events["BeforeShowList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowEdit(&$xt, &$templatefile, $values, $pageObject)
{

		$pageObject->hideItem("integrated_edit_field");
;		
} // function BeforeShowEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowAdd(&$xt, &$templatefile, $pageObject)
{

		$pageObject->hideItem("integrated_edit_field");
;		
} // function BeforeShowAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$sqlValues, &$message, $inline, $pageObject)
{

		
$values["empresa"]=strtoupper($values["empresa"]);

$strSQLExistse = DB::PrepareSQL("SELECT
	cvc_experiencia_laboral.empresa, 
	cvc_experiencia_laboral.proveedor
FROM
	bolsa_empleo.cvc_experiencia_laboral
WHERE
empresa = ':1' and proveedor = 'Usuario' and fk_persona_id = ':2'
",$values["empresa"],$_SESSION["persona_id"]);
$rsExistse = DB::Query($strSQLExistse);
$datae=$rsExistse->fetchAssoc();

if($datae)
{
$message ="Ya se encuentra esta Empresa en su lista" ;
return false;
}


$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);

if ($values["fk_habilidades"] == null)

{
$message = "Por favor ingresa Habilidades"; 

return false;


}

$values["descripcion_puesto"]=strtoupper($values["descripcion_puesto"]);

$rray_nuevos_habilidades_id= [];



//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",strtoupper($valuetoinsert2));
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }



$values["fk_habilidades"]= implode(',', $rray_nuevos_habilidades_id);


return true;
;		
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, &$sqlValues, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		
$values["empresa"]=strtoupper($values["empresa"]);

/*
$strSQLExistse = DB::PrepareSQL("SELECT
	cvc_experiencia_laboral.empresa, 
	cvc_experiencia_laboral.proveedor
FROM
	bolsa_empleo.cvc_experiencia_laboral
WHERE
empresa = ':1'
",$values["empresa"]);
$rsExistse = DB::Query($strSQLExistse);
$datae=$rsExistse->fetchAssoc();

if($datae)
{
$message ="Ya se enccuentra esta Empresa en su lista" ;
return false;
}


*/

$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);

if ($values["fk_habilidades"] == null)

{
$message = "Por favor ingresa Habilidades"; 

return false;


}

$values["descripcion_puesto"]=strtoupper($values["descripcion_puesto"]);

$rray_nuevos_habilidades_id= [];



//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",$valuetoinsert2);
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }



$values["fk_habilidades"]= implode(',', $rray_nuevos_habilidades_id);


return true;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		if ($data["proveedor"]=="REOP" || $data["proveedor"]=="IPS" )
{

$pageObject->hideItem("custom_button", $recordId); 


}
;		
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowList(&$xt, &$templatefile, $pageObject)
{

		$xt->assign("message", "Sin Datos. Añadir Información");
;		
} // function BeforeShowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>
